using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Opportunity.ResourceGenerator.Generator
{
    internal class FileWriter : IDisposable
    {
        private readonly StreamWriter writer;

        public int Indent { get; set; }

        public FileWriter(string path)
        {
            this.writer = new StreamWriter(path);
        }

        private static readonly System.Security.Cryptography.MD5 md5 = System.Security.Cryptography.MD5.Create();
        public void WriteHash(string filePath)
        {
            using (var stream = new FileStream(filePath, FileMode.Open))
            {
                var hash = md5.ComputeHash(stream);
                var hashstr = string.Concat(BitConverter.ToString(hash).Split('-'));
                WriteLine($@"#pragma checksum ""{filePath}"" ""{{406ea660-64cf-4c82-b6f0-42d48172a799}}"" ""{hashstr}""");
            }
        }

        public void WriteInfo()
        {
            WriteLine();
            WriteBlock(@"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
");
            WriteLine();
        }

        public void WriteLine()
        {
            this.writer.WriteLine();
        }

        public void WriteLine(string value)
        {
            if (value.IsNullOrEmpty())
            {
                WriteLine();
                return;
            }
            if (Indent > 0)
                this.writer.Write(new string(' ', Indent * 4));
            this.writer.WriteLine(value);
        }

        public void WriteBlock(string value)
        {
            if (value.IsNullOrWhiteSpace())
            {
                WriteLine();
                return;
            }

            if (value.StartsWith("\r\n"))
                value = value.Substring(2);
            else if (value.StartsWith("\n"))
                value = value.Substring(1);

            if (value.EndsWith("\r\n"))
                value = value.Substring(0, value.Length - 2);
            else if (value.EndsWith("\n"))
                value = value.Substring(0, value.Length - 1);

            var lines = value.Split(new[] { "\r\n", "\n" }, StringSplitOptions.None);
            foreach (var item in lines)
            {
                this.WriteLine(item);
            }
        }

        public void Write(string value)
        {
            this.writer.Write(value);
        }

        public void Dispose()
        {
            this.writer.Dispose();
        }
    }
}
