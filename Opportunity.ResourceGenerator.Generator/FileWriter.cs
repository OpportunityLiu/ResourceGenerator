using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Opportunity.ResourceGenerator.Generator
{
    class FileWriter : IDisposable
    {
        private StreamWriter writer;

        public FileWriter(string path)
        {
            this.writer = new StreamWriter(path);
        }

        private static readonly System.Security.Cryptography.MD5 md5 = System.Security.Cryptography.MD5.Create();
        public void WriteHash(string filePath)
        {
            using (var stream = new FileStream(filePath, FileMode.Open))
            {
                var hash = md5.ComputeHash(stream);
                var hashstr = string.Concat(BitConverter.ToString(hash).Split('-'));
                WriteLine($@"#pragma checksum ""{filePath}"" ""{{406ea660-64cf-4c82-b6f0-42d48172a799}}"" ""{hashstr}""");
            }
        }

        public void WriteInfo()
        {
            WriteLine("//------------------------------------------------------------------------------");
            WriteLine("// <auto-generated>");
            WriteLine("//     This code was generated by a tool.");
            WriteLine("//");
            WriteLine("//     Changes to this file may cause incorrect behavior and will be lost if");
            WriteLine("//     the code is regenerated.");
            WriteLine("// </auto-generated>");
            WriteLine("//------------------------------------------------------------------------------");
            WriteLine();
        }

        public void WriteLine()
        {
            this.writer.WriteLine();
        }

        public void WriteLine(string value)
        {
            this.writer.WriteLine(value);
        }

        public void WriteLine(int indent, string value)
        {
            if (indent == 0)
                this.writer.WriteLine(value);
            else if (indent > 0)
            {
                this.writer.Write(new string(' ', indent * 4));
                this.writer.WriteLine(value);
            }
            else
            {
                var empty = new string(' ', -indent * 4);
                if (value.StartsWith(empty))
                    this.writer.WriteLine(value.Substring(-indent * 4));
                else
                    this.writer.WriteLine(value.TrimStart());
            }
        }

        public void Write(string value)
        {
            this.writer.Write(value);
        }

        public void Dispose()
        {
            ((IDisposable)this.writer).Dispose();
        }
    }
}
